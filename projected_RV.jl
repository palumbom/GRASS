using JLD2
using SPICE
using GRASS
using Revise
using CSV
using DataFrames
using Statistics

GRASS.get_kernels()

function projected_RV(time, filename, LD_type, ext_toggle)
    # convert from utc to et as needed by SPICE
    time_stamps = utc2et.(time)

    variable_names = ["dA_total_proj_mean", "mean_weight_v_no_cb", "mean_weight_v_earth_orb", "zenith", "dA_total_proj", "idx1", "idx3", "mu_grid", "z_rot_sub", "N"]

    # Open the JLD2 file and read the variables into a dictionary
    data = jldopen("data/solar_disk/$(filename).jld2", "r") do file
        Dict(var => read(file, var) for var in variable_names)
    end
    
    dA_total_proj_mean = deepcopy(data["dA_total_proj_mean"])
    mean_weight_v_no_cb = deepcopy(data["mean_weight_v_no_cb"])
    mean_weight_v_earth_orb = deepcopy(data["mean_weight_v_earth_orb"])
    zenith_mean = deepcopy(data["zenith"])
    dA_total_proj = deepcopy(data["dA_total_proj"])
    idx1 = deepcopy(data["idx1"])
    idx3 = deepcopy(data["idx3"])
    mu_grid = deepcopy(data["mu_grid"])
    z_rot_sub = deepcopy(data["z_rot_sub"])

    # set up paramaters for disk
    N = data["N"]
    Nt = length(time_stamps)
    disk = GRASS.DiskParamsEclipse(N=N, Nt=Nt, Nsubgrid=10)

    wsp = GRASS.SynthWorkspaceEclipse(disk, 1, Nt, verbose=true)

    # get lines to construct templates
    lp = GRASS.LineProperties()
    name = GRASS.get_name(lp)
    λrest = GRASS.get_rest_wavelength(lp)
    lfile = GRASS.get_file(lp)

    if LD_type == "SSD"
        extinction_coeff = GRASS.ext_file_KSSD
    elseif LD_type == "300"
        extinction_coeff = GRASS.ext_file_K300
    end

    RV_list_no_cb_final = Vector{Vector{Float64}}(undef,size(lp.λrest)...)
    intensity_list_final = Vector{Vector{Float64}}(undef,size(lp.λrest)...)
    mean_intensity_final = Vector{Vector{Matrix{Float64}}}(undef,size(lp.λrest)...)
    # loop over lines
    for i in eachindex(lp.λrest) 
        println("\t>>> Template: " * string(splitdir(lfile[i])[2]))
        # set up parameters for synthesis
        lines = [λrest[i]]

        RV_list_no_cb = Vector{Float64}(undef,size(time_stamps)...)
        intensity_list = Vector{Float64}(undef,size(time_stamps)...)
        mean_intensity_list = Vector{Matrix{Float64}}(undef,size(time_stamps)...)
        for t in 1:disk.Nt
            if t < 25
                neid_ext_coeff = extinction_coeff[extinction_coeff[!, "Wavelength"] .== λrest[i], "Ext1"][1]
            elseif t >= 25 && t < 46 
                neid_ext_coeff = extinction_coeff[extinction_coeff[!, "Wavelength"] .== λrest[i], "Ext2"][1]
            elseif t >= 46 
                neid_ext_coeff = extinction_coeff[extinction_coeff[!, "Wavelength"] .== λrest[i], "Ext3"][1]
            end
            mean_intensity = GRASS.eclipse_compute_intensity(disk, lines, neid_ext_coeff, LD_type, idx1[t], idx3[t],
                                                                        mu_grid[t], mean_weight_v_no_cb[:, :, t], mean_weight_v_earth_orb[:, :, t],
                                                                        z_rot_sub[t], dA_total_proj[t], wsp.ld, wsp.z_rot, zenith_mean[t], ext_toggle, wsp.ext)
            idx_grid = mean_intensity[:, :, 1] .> 0.0

            if ext_toggle == false
                brightness = mean_intensity[:, :, 1] .* dA_total_proj_mean[:, :, t]
            end

            if ext_toggle == true
                brightness = mean_intensity[:, :, 1] .* dA_total_proj_mean[:, :, t] .* wsp.ext[:, :, 1]
            end

            cheapflux = sum(view(brightness, idx_grid))

            # determine final mean weighted velocity for disk grid
            final_weight_v_no_cb = sum(view(mean_weight_v_no_cb[:, :, t] .* brightness, idx_grid)) / cheapflux 
            final_weight_v_no_cb += mean(view(mean_weight_v_earth_orb[:, :, t], idx_grid))  

            RV_list_no_cb[t] = deepcopy(final_weight_v_no_cb)
            intensity_list[t] = deepcopy(cheapflux)
            mean_intensity_list[t] = deepcopy(mean_intensity[:, :, 1])
        end
        RV_list_no_cb_final[i] = deepcopy(RV_list_no_cb)
        intensity_list_final[i] = deepcopy(intensity_list)
        mean_intensity_final[i] = deepcopy(mean_intensity_list)
    end

    @save "$(filename)_$(LD_type).jld2"
    jldopen("$(filename)_$(LD_type).jld2", "a+") do file
        file["RV_list_no_cb"] = deepcopy(RV_list_no_cb_final) 
        file["intensity_list"] = deepcopy(intensity_list_final)
        file["mean_intensity"] = deepcopy(mean_intensity_final)
    end
end

function projected_RV_gpu(time, LD_type, ext_toggle)
    # convert from utc to et as needed by SPICE
    time_stamps = utc2et.(time)

    # NEID location
    obs_lat = 31.9583 
    obs_long = -111.5967  
    alt = 2.097938 

    # set up paramaters for disk
    N = 50
    Nt = length(time_stamps)
    disk = GRASS.DiskParamsEclipse(N=N, Nt=Nt, Nsubgrid=10)

    # get lines to construct templates
    lp = GRASS.LineProperties()
    λrest = GRASS.get_rest_wavelength(lp)
    depth = GRASS.get_depth(lp)
    lfile = GRASS.get_file(lp)
    resolution = 7e5

    if LD_type == "SSD"
        extinction_coeff = GRASS.ext_file_KSSD
    elseif LD_type == "300"
        extinction_coeff = GRASS.ext_file_K300
    end

    if ext_toggle == true
        ext_toggle_gpu = 1.0
    else 
        ext_toggle_gpu = 0.0
    end

    RV_list_no_cb_final = Vector{Vector{Float64}}(undef,size(lp.λrest)...)
    intensity_list_final = Vector{Vector{Float64}}(undef,size(lp.λrest)...)
    mean_intensity_final = Vector{Vector{Matrix{Float64}}}(undef,size(lp.λrest)...)
    # loop over lines
    for i in 1:1#eachindex(lp.λrest) 
        println("\t>>> Template: " * string(splitdir(lfile[i])[2]))
        # set up parameters for synthesis
        lines = [λrest[i]]
        templates = [lfile[i]]
        depths = [depth[i]]
        variability = trues(length(lines)) 
        blueshifts = zeros(length(lines))   # set convective blueshift value

        # make the spec composite type instances
        spec = GRASS.SpecParams(lines=lines, depths=depths, variability=variability,
                        blueshifts=blueshifts, templates=templates, resolution=resolution) 
        gpu_allocs = GRASS.GPUAllocsEclipse(spec, disk, Int(length(lines)), precision=Float64, verbose=true)

        RV_list_no_cb = Vector{Float64}(undef,size(time_stamps)...)
        intensity_list = Vector{Float64}(undef,size(time_stamps)...)
        mean_intensity_list = Vector{Matrix{Float64}}(undef,size(time_stamps)...)
        for t in 1:disk.Nt
            if t < 25
                neid_ext_coeff = extinction_coeff[extinction_coeff[!, "Wavelength"] .== λrest[i], "Ext1"][1]
            elseif t >= 25 && t < 46 
                neid_ext_coeff = extinction_coeff[extinction_coeff[!, "Wavelength"] .== λrest[i], "Ext2"][1]
            elseif t >= 46 
                neid_ext_coeff = extinction_coeff[extinction_coeff[!, "Wavelength"] .== λrest[i], "Ext3"][1]
            end
            GRASS.calc_eclipse_quantities_gpu!(time_stamps[t], obs_long, obs_lat, alt, lines, 
                                        LD_type, ext_toggle_gpu, neid_ext_coeff, disk, gpu_allocs)

            idx_grid = Array(gpu_allocs.ld[:, :, 1]) .> 0.0

            if ext_toggle == false
                brightness = Array(gpu_allocs.ld[:, :, 1]) .* Array(gpu_allocs.dA)
            end

            if ext_toggle == true
                brightness = Array(gpu_allocs.ld[:, :, 1]) .* Array(gpu_allocs.dA) .* Array(gpu_allocs.ext[:, :, 1])
            end

            cheapflux = sum(view(brightness, idx_grid))

            # determine final mean weighted velocity for disk grid
            final_weight_v_no_cb = sum(view(Array(gpu_allocs.projected_v) .* brightness, idx_grid)) / cheapflux 
            final_weight_v_no_cb += mean(view(Array(gpu_allocs.earth_v), idx_grid))  

            RV_list_no_cb[t] = deepcopy(final_weight_v_no_cb)
            intensity_list[t] = deepcopy(cheapflux)
            mean_intensity_list[t] = deepcopy(gpu_allocs.ld[:, :, 1])
        end
        RV_list_no_cb_final[i] = deepcopy(RV_list_no_cb)
        intensity_list_final[i] = deepcopy(intensity_list)
        mean_intensity_final[i] = deepcopy(mean_intensity_list)
    end

    @save "projected_$(LD_type)_gpu.jld2"
    jldopen("projected_$(LD_type)_gpu.jld2", "a+") do file
        file["RV_list_no_cb"] = deepcopy(RV_list_no_cb_final) 
        file["intensity_list"] = deepcopy(intensity_list_final)
        file["mean_intensity"] = deepcopy(mean_intensity_final)
    end
end

function neid_october_eclipse(LD_type, ext_toggle)
    neid_october = ["2023-10-14T15:26:45.500000", "2023-10-14T15:28:07.500000", "2023-10-14T15:29:30.500000", "2023-10-14T15:30:53.500000", "2023-10-14T15:32:15.500000", "2023-10-14T15:33:38.500000", "2023-10-14T15:35:01.500000", "2023-10-14T15:36:23.500000", "2023-10-14T15:37:46.500000", "2023-10-14T15:39:09.500000", "2023-10-14T15:40:31.500000", "2023-10-14T15:41:54.500000", "2023-10-14T15:43:17.500000", "2023-10-14T15:44:39.500000", "2023-10-14T15:46:02.500000", "2023-10-14T15:47:25.500000", "2023-10-14T15:48:47.500000", "2023-10-14T15:50:10.500000", "2023-10-14T15:51:33.500000", "2023-10-14T15:52:56.500000", "2023-10-14T15:54:18.500000", "2023-10-14T15:55:41.500000", "2023-10-14T15:57:04.500000", "2023-10-14T15:58:26.500000", "2023-10-14T15:59:49.500000", "2023-10-14T16:01:12.500000", "2023-10-14T16:02:34.500000", "2023-10-14T16:03:57.500000", "2023-10-14T16:05:20.500000", "2023-10-14T16:06:42.500000", "2023-10-14T16:08:05.500000", "2023-10-14T16:09:28.500000", "2023-10-14T16:10:50.500000", "2023-10-14T16:12:13.500000", "2023-10-14T16:13:36.500000", "2023-10-14T16:14:58.500000", "2023-10-14T16:16:21.500000", "2023-10-14T16:17:44.500000", "2023-10-14T16:19:06.500000", "2023-10-14T16:20:29.500000", "2023-10-14T16:21:52.500000", "2023-10-14T16:23:15.500000", "2023-10-14T16:24:37.500000", "2023-10-14T16:26:00.500000", "2023-10-14T16:27:23.500000", "2023-10-14T16:28:45.500000", "2023-10-14T16:30:08.500000", "2023-10-14T16:31:31.500000", "2023-10-14T16:32:53.500000", "2023-10-14T16:34:16.500000", "2023-10-14T16:35:39.500000", "2023-10-14T16:37:01.500000", "2023-10-14T16:38:24.500000", "2023-10-14T16:39:47.500000", "2023-10-14T16:41:09.500000", "2023-10-14T16:42:32.500000", "2023-10-14T16:43:55.500000", "2023-10-14T16:45:17.500000", "2023-10-14T16:46:40.500000", "2023-10-14T16:48:03.500000", "2023-10-14T16:49:25.500000", "2023-10-14T16:50:48.500000", "2023-10-14T16:52:11.500000", "2023-10-14T16:53:33.500000", "2023-10-14T16:54:56.500000", "2023-10-14T16:56:19.500000", "2023-10-14T16:57:42.500000", "2023-10-14T16:59:04.500000", "2023-10-14T17:00:27.500000", "2023-10-14T17:01:50.500000", "2023-10-14T17:03:12.500000", "2023-10-14T17:04:35.500000", "2023-10-14T17:05:58.500000", "2023-10-14T17:07:20.500000", "2023-10-14T17:08:43.500000", "2023-10-14T17:10:06.500000", "2023-10-14T17:11:28.500000", "2023-10-14T17:12:51.500000", "2023-10-14T17:14:14.500000", "2023-10-14T17:15:36.500000", "2023-10-14T17:16:59.500000", "2023-10-14T17:18:22.500000", "2023-10-14T17:19:44.500000", "2023-10-14T17:21:07.500000", "2023-10-14T17:22:30.500000", "2023-10-14T17:23:52.500000", "2023-10-14T17:25:15.500000", "2023-10-14T17:26:38.500000", "2023-10-14T17:28:01.500000", "2023-10-14T17:29:23.500000", "2023-10-14T17:30:46.500000", "2023-10-14T17:32:09.500000", "2023-10-14T17:33:31.500000", "2023-10-14T17:34:54.500000", "2023-10-14T17:36:17.500000", "2023-10-14T17:37:39.500000", "2023-10-14T17:39:02.500000", "2023-10-14T17:40:25.500000", "2023-10-14T17:41:47.500000", "2023-10-14T17:43:10.500000", "2023-10-14T17:44:33.500000", "2023-10-14T17:45:55.500000", "2023-10-14T17:47:18.500000", "2023-10-14T17:48:41.500000", "2023-10-14T17:50:03.500000", "2023-10-14T17:51:26.500000", "2023-10-14T17:52:49.500000", "2023-10-14T17:54:11.500000", "2023-10-14T17:55:34.500000", "2023-10-14T17:56:57.500000", "2023-10-14T17:58:20.500000", "2023-10-14T17:59:42.500000", "2023-10-14T18:01:05.500000", "2023-10-14T18:02:28.500000", "2023-10-14T18:03:50.500000", "2023-10-14T18:05:13.500000", "2023-10-14T18:06:36.500000", "2023-10-14T18:07:58.500000", "2023-10-14T18:09:21.500000", "2023-10-14T18:10:44.500000", "2023-10-14T18:12:06.500000", "2023-10-14T18:13:29.500000", "2023-10-14T18:14:52.500000", "2023-10-14T18:16:14.500000", "2023-10-14T18:17:37.500000", "2023-10-14T18:19:00.500000", "2023-10-14T18:20:22.500000", "2023-10-14T18:21:45.500000", "2023-10-14T18:23:08.500000", "2023-10-14T18:24:30.500000", "2023-10-14T18:25:53.500000", "2023-10-14T18:27:16.500000", "2023-10-14T18:28:38.500000", "2023-10-14T18:30:01.500000", "2023-10-14T18:31:24.500000", "2023-10-14T18:32:47.500000", "2023-10-14T18:34:09.500000", "2023-10-14T18:35:32.500000", "2023-10-14T18:36:55.500000", "2023-10-14T18:38:17.500000", "2023-10-14T18:39:40.500000", "2023-10-14T18:41:03.500000", "2023-10-14T18:42:25.500000", "2023-10-14T18:43:48.500000", "2023-10-14T18:45:11.500000", "2023-10-14T18:46:33.500000", "2023-10-14T18:47:56.500000", "2023-10-14T18:49:19.500000", "2023-10-14T18:50:41.500000", "2023-10-14T18:52:04.500000", "2023-10-14T18:53:27.500000", "2023-10-14T18:54:49.500000", "2023-10-14T18:56:12.500000", "2023-10-14T18:57:35.500000", "2023-10-14T18:58:57.500000", "2023-10-14T19:00:20.500000", "2023-10-14T19:01:43.500000", "2023-10-14T19:03:06.500000"]

    projected_RV(neid_october, "neid_october_N_50", LD_type, ext_toggle)
end

function neid_october_eclipse_gpu(LD_type, ext_toggle)
    neid_october = ["2023-10-14T15:26:45.500000", "2023-10-14T15:28:07.500000", "2023-10-14T15:29:30.500000", "2023-10-14T15:30:53.500000", "2023-10-14T15:32:15.500000", "2023-10-14T15:33:38.500000", "2023-10-14T15:35:01.500000", "2023-10-14T15:36:23.500000", "2023-10-14T15:37:46.500000", "2023-10-14T15:39:09.500000", "2023-10-14T15:40:31.500000", "2023-10-14T15:41:54.500000", "2023-10-14T15:43:17.500000", "2023-10-14T15:44:39.500000", "2023-10-14T15:46:02.500000", "2023-10-14T15:47:25.500000", "2023-10-14T15:48:47.500000", "2023-10-14T15:50:10.500000", "2023-10-14T15:51:33.500000", "2023-10-14T15:52:56.500000", "2023-10-14T15:54:18.500000", "2023-10-14T15:55:41.500000", "2023-10-14T15:57:04.500000", "2023-10-14T15:58:26.500000", "2023-10-14T15:59:49.500000", "2023-10-14T16:01:12.500000", "2023-10-14T16:02:34.500000", "2023-10-14T16:03:57.500000", "2023-10-14T16:05:20.500000", "2023-10-14T16:06:42.500000", "2023-10-14T16:08:05.500000", "2023-10-14T16:09:28.500000", "2023-10-14T16:10:50.500000", "2023-10-14T16:12:13.500000", "2023-10-14T16:13:36.500000", "2023-10-14T16:14:58.500000", "2023-10-14T16:16:21.500000", "2023-10-14T16:17:44.500000", "2023-10-14T16:19:06.500000", "2023-10-14T16:20:29.500000", "2023-10-14T16:21:52.500000", "2023-10-14T16:23:15.500000", "2023-10-14T16:24:37.500000", "2023-10-14T16:26:00.500000", "2023-10-14T16:27:23.500000", "2023-10-14T16:28:45.500000", "2023-10-14T16:30:08.500000", "2023-10-14T16:31:31.500000", "2023-10-14T16:32:53.500000", "2023-10-14T16:34:16.500000", "2023-10-14T16:35:39.500000", "2023-10-14T16:37:01.500000", "2023-10-14T16:38:24.500000", "2023-10-14T16:39:47.500000", "2023-10-14T16:41:09.500000", "2023-10-14T16:42:32.500000", "2023-10-14T16:43:55.500000", "2023-10-14T16:45:17.500000", "2023-10-14T16:46:40.500000", "2023-10-14T16:48:03.500000", "2023-10-14T16:49:25.500000", "2023-10-14T16:50:48.500000", "2023-10-14T16:52:11.500000", "2023-10-14T16:53:33.500000", "2023-10-14T16:54:56.500000", "2023-10-14T16:56:19.500000", "2023-10-14T16:57:42.500000", "2023-10-14T16:59:04.500000", "2023-10-14T17:00:27.500000", "2023-10-14T17:01:50.500000", "2023-10-14T17:03:12.500000", "2023-10-14T17:04:35.500000", "2023-10-14T17:05:58.500000", "2023-10-14T17:07:20.500000", "2023-10-14T17:08:43.500000", "2023-10-14T17:10:06.500000", "2023-10-14T17:11:28.500000", "2023-10-14T17:12:51.500000", "2023-10-14T17:14:14.500000", "2023-10-14T17:15:36.500000", "2023-10-14T17:16:59.500000", "2023-10-14T17:18:22.500000", "2023-10-14T17:19:44.500000", "2023-10-14T17:21:07.500000", "2023-10-14T17:22:30.500000", "2023-10-14T17:23:52.500000", "2023-10-14T17:25:15.500000", "2023-10-14T17:26:38.500000", "2023-10-14T17:28:01.500000", "2023-10-14T17:29:23.500000", "2023-10-14T17:30:46.500000", "2023-10-14T17:32:09.500000", "2023-10-14T17:33:31.500000", "2023-10-14T17:34:54.500000", "2023-10-14T17:36:17.500000", "2023-10-14T17:37:39.500000", "2023-10-14T17:39:02.500000", "2023-10-14T17:40:25.500000", "2023-10-14T17:41:47.500000", "2023-10-14T17:43:10.500000", "2023-10-14T17:44:33.500000", "2023-10-14T17:45:55.500000", "2023-10-14T17:47:18.500000", "2023-10-14T17:48:41.500000", "2023-10-14T17:50:03.500000", "2023-10-14T17:51:26.500000", "2023-10-14T17:52:49.500000", "2023-10-14T17:54:11.500000", "2023-10-14T17:55:34.500000", "2023-10-14T17:56:57.500000", "2023-10-14T17:58:20.500000", "2023-10-14T17:59:42.500000", "2023-10-14T18:01:05.500000", "2023-10-14T18:02:28.500000", "2023-10-14T18:03:50.500000", "2023-10-14T18:05:13.500000", "2023-10-14T18:06:36.500000", "2023-10-14T18:07:58.500000", "2023-10-14T18:09:21.500000", "2023-10-14T18:10:44.500000", "2023-10-14T18:12:06.500000", "2023-10-14T18:13:29.500000", "2023-10-14T18:14:52.500000", "2023-10-14T18:16:14.500000", "2023-10-14T18:17:37.500000", "2023-10-14T18:19:00.500000", "2023-10-14T18:20:22.500000", "2023-10-14T18:21:45.500000", "2023-10-14T18:23:08.500000", "2023-10-14T18:24:30.500000", "2023-10-14T18:25:53.500000", "2023-10-14T18:27:16.500000", "2023-10-14T18:28:38.500000", "2023-10-14T18:30:01.500000", "2023-10-14T18:31:24.500000", "2023-10-14T18:32:47.500000", "2023-10-14T18:34:09.500000", "2023-10-14T18:35:32.500000", "2023-10-14T18:36:55.500000", "2023-10-14T18:38:17.500000", "2023-10-14T18:39:40.500000", "2023-10-14T18:41:03.500000", "2023-10-14T18:42:25.500000", "2023-10-14T18:43:48.500000", "2023-10-14T18:45:11.500000", "2023-10-14T18:46:33.500000", "2023-10-14T18:47:56.500000", "2023-10-14T18:49:19.500000", "2023-10-14T18:50:41.500000", "2023-10-14T18:52:04.500000", "2023-10-14T18:53:27.500000", "2023-10-14T18:54:49.500000", "2023-10-14T18:56:12.500000", "2023-10-14T18:57:35.500000", "2023-10-14T18:58:57.500000", "2023-10-14T19:00:20.500000", "2023-10-14T19:01:43.500000", "2023-10-14T19:03:06.500000"]

    projected_RV_gpu(neid_october, LD_type, ext_toggle)
end

function neid_october_nxt_day(LD_type, ext_toggle)
    neid_1015 = ["2023-10-15T16:33:02.500", "2023-10-15T16:34:25.500", "2023-10-15T16:35:48.500", "2023-10-15T16:37:10.500", "2023-10-15T16:38:33.500", "2023-10-15T16:39:56.500", "2023-10-15T16:41:18.500", "2023-10-15T16:42:41.500", "2023-10-15T16:44:04.500", "2023-10-15T16:45:26.500", "2023-10-15T16:46:49.500", "2023-10-15T16:48:12.500", "2023-10-15T16:49:34.500", "2023-10-15T16:50:57.500", "2023-10-15T16:52:20.500", "2023-10-15T16:53:42.500", "2023-10-15T16:55:05.500", "2023-10-15T16:56:28.500", "2023-10-15T16:57:50.500", "2023-10-15T16:59:13.500", "2023-10-15T17:00:36.500", "2023-10-15T17:01:59.500", "2023-10-15T17:03:21.500", "2023-10-15T17:04:44.500", "2023-10-15T17:06:07.500", "2023-10-15T17:07:29.500", "2023-10-15T17:08:52.500", "2023-10-15T17:10:15.500", "2023-10-15T17:11:37.500", "2023-10-15T17:13:00.500", "2023-10-15T17:14:23.500", "2023-10-15T17:15:45.500", "2023-10-15T17:17:08.500", "2023-10-15T17:18:31.500", "2023-10-15T17:19:53.500", "2023-10-15T17:21:16.500", "2023-10-15T17:22:39.500", "2023-10-15T17:24:01.500", "2023-10-15T17:25:24.500", "2023-10-15T17:26:47.500", "2023-10-15T17:28:09.500", "2023-10-15T17:29:32.500", "2023-10-15T17:30:55.500", "2023-10-15T17:32:18.500", "2023-10-15T17:33:40.500", "2023-10-15T17:35:03.500", "2023-10-15T17:36:26.500", "2023-10-15T17:37:48.500", "2023-10-15T17:39:11.500", "2023-10-15T17:40:34.500", "2023-10-15T17:41:56.500", "2023-10-15T17:43:19.500", "2023-10-15T17:44:42.500", "2023-10-15T17:46:04.500", "2023-10-15T17:47:27.500", "2023-10-15T17:48:50.500", "2023-10-15T17:50:12.500", "2023-10-15T17:51:35.500", "2023-10-15T17:52:58.500", "2023-10-15T17:54:20.500", "2023-10-15T17:57:10.500", "2023-10-15T17:58:33.500", "2023-10-15T17:59:55.500", "2023-10-15T18:01:18.500", "2023-10-15T18:02:41.500", "2023-10-15T18:04:03.500", "2023-10-15T18:05:26.500", "2023-10-15T18:06:49.500", "2023-10-15T18:08:11.500", "2023-10-15T18:09:34.500", "2023-10-15T18:10:57.500", "2023-10-15T18:12:19.500", "2023-10-15T18:13:42.500", "2023-10-15T18:15:05.500", "2023-10-15T18:16:27.500", "2023-10-15T18:17:50.500", "2023-10-15T18:19:13.500", "2023-10-15T18:20:35.500", "2023-10-15T18:21:58.500", "2023-10-15T18:23:21.500", "2023-10-15T18:24:44.500", "2023-10-15T18:26:06.500", "2023-10-15T18:27:29.500", "2023-10-15T18:28:52.500", "2023-10-15T18:30:14.500", "2023-10-15T18:31:37.500", "2023-10-15T18:33:00.500", "2023-10-15T18:34:22.500", "2023-10-15T18:35:45.500", "2023-10-15T18:37:08.500", "2023-10-15T18:38:30.500", "2023-10-15T18:39:53.500", "2023-10-15T18:41:16.500", "2023-10-15T18:42:38.500", "2023-10-15T18:44:01.500", "2023-10-15T18:45:24.500", "2023-10-15T18:46:46.500", "2023-10-15T18:48:09.500", "2023-10-15T18:49:32.500", "2023-10-15T18:50:54.500", "2023-10-15T18:52:17.500", "2023-10-15T18:53:40.500", "2023-10-15T18:55:03.500", "2023-10-15T18:56:25.500", "2023-10-15T18:57:48.500", "2023-10-15T18:59:11.500", "2023-10-15T19:00:33.500", "2023-10-15T19:01:56.500", "2023-10-15T19:03:19.500", "2023-10-15T19:04:41.500", "2023-10-15T19:06:04.500"]

    projected_RV(neid_1015, "neid_october_N_50_nxt_day", LD_type, ext_toggle)
end

neid_october_eclipse_gpu("SSD", true)