using GRASS
using Printf
using Revise
using SPICE
using Statistics
using EchelleCCFs
using BenchmarkTools
using JLD2

GRASS.get_kernels()

case = "Gottingen"
#LD type, ext true false, ext law, ext coefficient, wavelength, LD coeff best fit 
granulation = false

if case == "Boulder"
    #boulder_timestamps = ["2023-10-14T13:25:37", "2023-10-14T13:27:01", "2023-10-14T13:28:23", "2023-10-14T13:29:42", "2023-10-14T13:31:08", "2023-10-14T13:32:25", "2023-10-14T13:33:49", "2023-10-14T13:35:10", "2023-10-14T13:36:33", "2023-10-14T13:37:56", "2023-10-14T13:39:18", "2023-10-14T13:40:37", "2023-10-14T13:42:01", "2023-10-14T13:43:22", "2023-10-14T13:44:46", "2023-10-14T13:46:09", "2023-10-14T13:47:26", "2023-10-14T13:48:50", "2023-10-14T13:50:14", "2023-10-14T13:51:38", "2023-10-14T13:52:57", "2023-10-14T13:53:55", "2023-10-14T13:59:00", "2023-10-14T13:59:41", "2023-10-14T14:03:04", "2023-10-14T14:03:20", "2023-10-14T14:05:15", "2023-10-14T14:06:34", "2023-10-14T14:12:22", "2023-10-14T14:13:27", "2023-10-14T14:14:48", "2023-10-14T14:16:12", "2023-10-14T14:17:34", "2023-10-14T14:18:56", "2023-10-14T14:20:20", "2023-10-14T14:21:44", "2023-10-14T14:23:02", "2023-10-14T14:24:24", "2023-10-14T14:25:45", "2023-10-14T14:27:10", "2023-10-14T14:28:32", "2023-10-14T14:29:50", "2023-10-14T14:31:13", "2023-10-14T14:32:34", "2023-10-14T14:33:59", "2023-10-14T14:35:21", "2023-10-14T14:36:18", "2023-10-14T15:38:31", "2023-10-14T15:39:34", "2023-10-14T15:40:55", "2023-10-14T15:42:19", "2023-10-14T15:43:37", "2023-10-14T15:44:42", "2023-10-14T15:46:30", "2023-10-14T15:47:48", "2023-10-14T15:49:10", "2023-10-14T15:50:31", "2023-10-14T15:51:53", "2023-10-14T15:53:14", "2023-10-14T15:54:37", "2023-10-14T15:55:59", "2023-10-14T15:57:21", "2023-10-14T15:58:40", "2023-10-14T16:00:04", "2023-10-14T16:01:28", "2023-10-14T16:02:49", "2023-10-14T16:04:11", "2023-10-14T16:05:32", "2023-10-14T16:06:54", "2023-10-14T16:08:18", "2023-10-14T16:09:39", "2023-10-14T16:11:01", "2023-10-14T16:12:25", "2023-10-14T16:13:46", "2023-10-14T16:15:08", "2023-10-14T16:16:27", "2023-10-14T16:17:50", "2023-10-14T16:19:14", "2023-10-14T16:20:36", "2023-10-14T16:21:57", "2023-10-14T16:23:19", "2023-10-14T16:24:40", "2023-10-14T16:26:04", "2023-10-14T16:27:26", "2023-10-14T16:28:47", "2023-10-14T16:30:09", "2023-10-14T16:31:32", "2023-10-14T16:32:54", "2023-10-14T16:34:16", "2023-10-14T16:35:37", "2023-10-14T16:36:58", "2023-10-14T16:39:52", "2023-10-14T16:41:05", "2023-10-14T16:42:32", "2023-10-14T16:43:51", "2023-10-14T16:45:12", "2023-10-14T16:46:23", "2023-10-14T16:48:03", "2023-10-14T16:49:17", "2023-10-14T16:50:42", "2023-10-14T16:51:58", "2023-10-14T16:53:24", "2023-10-14T16:54:45", "2023-10-14T16:56:06", "2023-10-14T16:57:31", "2023-10-14T16:58:53", "2023-10-14T17:00:13", "2023-10-14T17:01:35", "2023-10-14T17:02:56", "2023-10-14T17:04:20", "2023-10-14T17:05:42", "2023-10-14T17:07:03", "2023-10-14T17:08:27", "2023-10-14T17:09:49", "2023-10-14T17:11:10", "2023-10-14T17:12:32", "2023-10-14T17:13:53", "2023-10-14T17:15:17", "2023-10-14T17:16:39", "2023-10-14T17:18:00", "2023-10-14T17:19:21", "2023-10-14T17:20:43", "2023-10-14T17:22:07", "2023-10-14T17:23:28", "2023-10-14T17:24:50", "2023-10-14T17:26:12", "2023-10-14T17:27:33", "2023-10-14T17:28:41", "2023-10-14T18:41:52", "2023-10-14T18:42:46", "2023-10-14T18:44:08", "2023-10-14T18:45:29", "2023-10-14T18:46:50", "2023-10-14T18:48:12", "2023-10-14T18:49:36", "2023-10-14T18:50:39", "2023-10-14T18:55:41", "2023-10-14T18:56:25", "2023-10-14T18:57:51", "2023-10-14T18:59:09", "2023-10-14T19:00:33", "2023-10-14T19:01:54", "2023-10-14T19:03:13", "2023-10-14T19:04:37", "2023-10-14T20:37:30", "2023-10-14T23:07:01", "2023-10-14T23:07:58", "2023-10-14T23:09:18"]
    boulder_april_swept = ["2024-04-08T16:56:30", "2024-04-08T16:57:30", "2024-04-08T16:58:30", "2024-04-08T16:59:30", "2024-04-08T17:00:30", "2024-04-08T17:01:30", "2024-04-08T17:02:30", "2024-04-08T17:03:30", "2024-04-08T17:04:30", "2024-04-08T17:05:30", "2024-04-08T17:06:30", "2024-04-08T17:07:30", "2024-04-08T17:08:30", "2024-04-08T17:09:30", "2024-04-08T17:10:30", "2024-04-08T17:11:30", "2024-04-08T17:12:30", "2024-04-08T17:13:30", "2024-04-08T17:14:30", "2024-04-08T17:15:30", "2024-04-08T17:16:30", "2024-04-08T17:17:30", "2024-04-08T17:18:30", "2024-04-08T17:19:30", "2024-04-08T17:20:30", "2024-04-08T17:21:30", "2024-04-08T17:22:30", "2024-04-08T17:23:30", "2024-04-08T17:24:30", "2024-04-08T17:25:30", "2024-04-08T17:26:30", "2024-04-08T17:27:30", "2024-04-08T17:28:30", "2024-04-08T17:29:30", "2024-04-08T17:30:30", "2024-04-08T17:31:30", "2024-04-08T17:32:30", "2024-04-08T17:33:30", "2024-04-08T17:34:30", "2024-04-08T17:35:30", "2024-04-08T17:36:30", "2024-04-08T17:37:30", "2024-04-08T17:38:30", "2024-04-08T17:39:30", "2024-04-08T17:40:30", "2024-04-08T17:41:30", "2024-04-08T17:42:30", "2024-04-08T17:43:30", "2024-04-08T17:44:30", "2024-04-08T17:45:30", "2024-04-08T17:46:30", "2024-04-08T17:47:30", "2024-04-08T17:48:30", "2024-04-08T17:49:30", "2024-04-08T17:50:30", "2024-04-08T17:51:30", "2024-04-08T17:52:30", "2024-04-08T17:53:30", "2024-04-08T17:54:30", "2024-04-08T17:55:30", "2024-04-08T17:56:30", "2024-04-08T17:57:30", "2024-04-08T17:58:30", "2024-04-08T17:59:30", "2024-04-08T18:00:30", "2024-04-08T18:01:30", "2024-04-08T18:02:30", "2024-04-08T18:03:30", "2024-04-08T18:04:30", "2024-04-08T18:05:30", "2024-04-08T18:06:30", "2024-04-08T18:07:30", "2024-04-08T18:08:30", "2024-04-08T18:09:30", "2024-04-08T18:10:30", "2024-04-08T18:11:30", "2024-04-08T18:12:30", "2024-04-08T18:13:30", "2024-04-08T18:14:30", "2024-04-08T18:15:30", "2024-04-08T18:16:30", "2024-04-08T18:17:30", "2024-04-08T18:18:30", "2024-04-08T18:19:30", "2024-04-08T18:20:30", "2024-04-08T18:21:30", "2024-04-08T18:22:30", "2024-04-08T18:23:30", "2024-04-08T18:24:30", "2024-04-08T18:25:30", "2024-04-08T18:26:30", "2024-04-08T18:27:30", "2024-04-08T18:28:30", "2024-04-08T18:29:30", "2024-04-08T18:30:30", "2024-04-08T18:31:30", "2024-04-08T18:32:30", "2024-04-08T18:33:30", "2024-04-08T18:34:30", "2024-04-08T18:35:30", "2024-04-08T18:36:30", "2024-04-08T18:37:30", "2024-04-08T18:38:30", "2024-04-08T18:39:30", "2024-04-08T18:40:30", "2024-04-08T18:41:30", "2024-04-08T18:42:30", "2024-04-08T18:43:30", "2024-04-08T18:44:30", "2024-04-08T18:45:30", "2024-04-08T18:46:30", "2024-04-08T18:47:30", "2024-04-08T18:48:30", "2024-04-08T18:49:30", "2024-04-08T18:50:30", "2024-04-08T18:51:30", "2024-04-08T18:52:30", "2024-04-08T18:53:30", "2024-04-08T18:54:30", "2024-04-08T18:55:30", "2024-04-08T18:56:30", "2024-04-08T18:57:30", "2024-04-08T18:58:30", "2024-04-08T18:59:30", "2024-04-08T19:00:30", "2024-04-08T19:01:30", "2024-04-08T19:02:30", "2024-04-08T19:03:30", "2024-04-08T19:04:30", "2024-04-08T19:05:30", "2024-04-08T19:06:30", "2024-04-08T19:07:30", "2024-04-08T19:08:30", "2024-04-08T19:09:30", "2024-04-08T19:10:30", "2024-04-08T19:11:30", "2024-04-08T19:12:30", "2024-04-08T19:13:30", "2024-04-08T19:14:30", "2024-04-08T19:15:30", "2024-04-08T19:16:30", "2024-04-08T19:17:30", "2024-04-08T19:18:30", "2024-04-08T19:19:30", "2024-04-08T19:20:30", "2024-04-08T19:21:30", "2024-04-08T19:22:30", "2024-04-08T19:23:30", "2024-04-08T19:24:30", "2024-04-08T19:25:30", "2024-04-08T19:26:30", "2024-04-08T19:27:30", "2024-04-08T19:28:30", "2024-04-08T19:29:30", "2024-04-08T19:30:30", "2024-04-08T19:31:30", "2024-04-08T19:32:30", "2024-04-08T19:33:30", "2024-04-08T19:34:30", "2024-04-08T19:35:30", "2024-04-08T19:36:30", "2024-04-08T19:37:30", "2024-04-08T19:38:30", "2024-04-08T19:39:30", "2024-04-08T19:40:30", "2024-04-08T19:41:30", "2024-04-08T19:42:30", "2024-04-08T19:43:30", "2024-04-08T19:44:30", "2024-04-08T19:45:30", "2024-04-08T19:46:30", "2024-04-08T19:47:30", "2024-04-08T19:48:30", "2024-04-08T19:49:30", "2024-04-08T19:50:30", "2024-04-08T19:51:30", "2024-04-08T19:52:30", "2024-04-08T19:53:30", "2024-04-08T19:54:30", "2024-04-08T19:55:30", "2024-04-08T19:56:30", "2024-04-08T19:57:30", "2024-04-08T19:58:30", "2024-04-08T19:59:30", "2024-04-08T20:00:30", "2024-04-08T20:01:30", "2024-04-08T20:02:30", "2024-04-08T20:03:30", "2024-04-08T20:04:30", "2024-04-08T20:05:30", "2024-04-08T20:06:30", "2024-04-08T20:07:30", "2024-04-08T20:08:30", "2024-04-08T20:09:30", "2024-04-08T20:10:30", "2024-04-08T20:11:30", "2024-04-08T20:12:30", "2024-04-08T20:13:30", "2024-04-08T20:14:30", "2024-04-08T20:15:30", "2024-04-08T20:16:30", "2024-04-08T20:17:30", "2024-04-08T20:18:30", "2024-04-08T20:19:30", "2024-04-08T20:20:30", "2024-04-08T20:21:30", "2024-04-08T20:22:30", "2024-04-08T20:23:30", "2024-04-08T20:24:30", "2024-04-08T20:25:30", "2024-04-08T20:26:30", "2024-04-08T20:27:30", "2024-04-08T20:28:30", "2024-04-08T20:29:30", "2024-04-08T20:30:30", "2024-04-08T20:31:30", "2024-04-08T20:32:30", "2024-04-08T20:33:30", "2024-04-08T20:34:30", "2024-04-08T20:35:30", "2024-04-08T20:36:30", "2024-04-08T20:37:30", "2024-04-08T20:38:30", "2024-04-08T20:39:30"]
    boulder_april_dither = ["2024-04-08T17:19:30", "2024-04-08T17:20:30", "2024-04-08T17:21:30", "2024-04-08T17:22:30", "2024-04-08T17:23:30", "2024-04-08T17:24:30", "2024-04-08T17:25:30", "2024-04-08T17:26:30", "2024-04-08T17:27:30", "2024-04-08T17:28:30", "2024-04-08T17:29:30", "2024-04-08T17:30:30", "2024-04-08T17:31:30", "2024-04-08T17:32:30", "2024-04-08T17:33:30", "2024-04-08T17:34:30", "2024-04-08T17:35:30", "2024-04-08T17:36:30", "2024-04-08T17:37:30", "2024-04-08T17:38:30", "2024-04-08T17:39:30", "2024-04-08T17:40:30", "2024-04-08T17:41:30", "2024-04-08T17:42:30", "2024-04-08T17:43:30", "2024-04-08T17:44:30", "2024-04-08T17:45:30", "2024-04-08T17:46:30", "2024-04-08T17:47:30", "2024-04-08T17:48:30", "2024-04-08T17:49:30", "2024-04-08T17:50:30", "2024-04-08T17:51:30", "2024-04-08T17:52:30", "2024-04-08T17:53:30", "2024-04-08T17:54:30", "2024-04-08T17:55:30", "2024-04-08T17:56:30", "2024-04-08T17:57:30", "2024-04-08T17:58:30", "2024-04-08T17:59:30", "2024-04-08T18:00:30", "2024-04-08T18:01:30", "2024-04-08T18:02:30", "2024-04-08T18:03:30", "2024-04-08T18:04:30", "2024-04-08T18:05:30", "2024-04-08T18:06:30", "2024-04-08T18:07:30", "2024-04-08T18:08:30", "2024-04-08T18:09:30", "2024-04-08T18:10:30", "2024-04-08T18:11:30", "2024-04-08T18:12:30", "2024-04-08T18:13:30", "2024-04-08T18:14:30", "2024-04-08T18:15:30", "2024-04-08T18:16:30", "2024-04-08T18:17:30", "2024-04-08T18:18:30", "2024-04-08T18:19:30", "2024-04-08T18:20:30", "2024-04-08T18:21:30", "2024-04-08T18:22:30", "2024-04-08T18:23:30", "2024-04-08T18:24:30", "2024-04-08T18:25:30", "2024-04-08T18:26:30", "2024-04-08T18:27:30", "2024-04-08T18:28:30", "2024-04-08T18:29:30", "2024-04-08T18:30:30", "2024-04-08T18:31:30", "2024-04-08T18:32:30", "2024-04-08T18:33:30", "2024-04-08T18:34:30", "2024-04-08T18:35:30", "2024-04-08T18:36:30", "2024-04-08T18:37:30", "2024-04-08T18:38:30", "2024-04-08T18:39:30", "2024-04-08T18:40:30", "2024-04-08T18:41:30", "2024-04-08T18:42:30", "2024-04-08T18:43:30", "2024-04-08T18:44:30", "2024-04-08T18:45:30", "2024-04-08T18:46:30", "2024-04-08T18:47:30", "2024-04-08T18:48:30", "2024-04-08T18:49:30", "2024-04-08T18:50:30", "2024-04-08T18:51:30", "2024-04-08T18:52:30", "2024-04-08T18:53:30", "2024-04-08T18:54:30", "2024-04-08T18:55:30", "2024-04-08T18:56:30", "2024-04-08T18:57:30", "2024-04-08T18:58:30", "2024-04-08T18:59:30", "2024-04-08T19:00:30", "2024-04-08T19:01:30", "2024-04-08T19:02:30", "2024-04-08T19:03:30", "2024-04-08T19:04:30", "2024-04-08T19:05:30", "2024-04-08T19:06:30", "2024-04-08T19:07:30", "2024-04-08T19:08:30", "2024-04-08T19:09:30", "2024-04-08T19:10:30", "2024-04-08T19:11:30", "2024-04-08T19:12:30", "2024-04-08T19:13:30", "2024-04-08T19:14:30", "2024-04-08T19:15:30", "2024-04-08T19:16:30", "2024-04-08T19:17:30", "2024-04-08T19:18:30", "2024-04-08T19:19:30", "2024-04-08T19:20:30", "2024-04-08T19:21:30", "2024-04-08T19:22:30", "2024-04-08T19:23:30", "2024-04-08T19:24:30", "2024-04-08T19:25:30", "2024-04-08T19:26:30", "2024-04-08T19:27:30", "2024-04-08T19:28:30", "2024-04-08T19:29:30", "2024-04-08T19:30:30", "2024-04-08T19:31:30", "2024-04-08T19:32:30", "2024-04-08T19:33:30", "2024-04-08T19:34:30", "2024-04-08T19:35:30", "2024-04-08T19:36:30", "2024-04-08T19:37:30", "2024-04-08T19:38:30", "2024-04-08T19:39:30", "2024-04-08T19:40:30", "2024-04-08T19:41:30", "2024-04-08T19:42:30", "2024-04-08T19:43:30", "2024-04-08T19:44:30", "2024-04-08T19:45:30", "2024-04-08T19:46:30", "2024-04-08T19:47:30", "2024-04-08T19:48:30", "2024-04-08T19:49:30", "2024-04-08T19:50:30", "2024-04-08T19:51:30", "2024-04-08T19:52:30", "2024-04-08T19:53:30", "2024-04-08T19:54:30", "2024-04-08T19:55:30", "2024-04-08T19:56:30", "2024-04-08T19:57:30", "2024-04-08T19:58:30", "2024-04-08T19:59:30"]

    #convert from utc to et as needed by SPICE
    time_stamps = utc2et.(boulder_april_dither)

    #Boulder location
    obs_lat = 39.995380
    obs_long = -105.262390
    alt = 1.6523

    # set up paramaters for disk
    N = 50
    Nt = length(time_stamps)

    # set up parameters for spectrum
    lines = [15654.0] # array of line centers 
    depths = [0.6]   # array of line depths
    templates = ["FeI_5434"] # template data to use
    if granulation == true
        variability = trues(length(lines))  # whether or not the bisectors should "dance"
    end
    if granulation == false
        variability = falses(length(lines))
    end
    blueshifts = zeros(length(lines))   # set convective blueshift value
    resolution = 7e5                    # spectral resolution

    # make the disk and spec composite type instances
    disk = GRASS.DiskParamsEclipse(N=N, Nt=Nt, Nsubgrid=10)
    spec = GRASS.SpecParams(lines=lines, depths=depths, variability=variability,
                    blueshifts=blueshifts, templates=templates, resolution=resolution)  

    # actually synthesize the spectra
    println(">>> Synthesizing on CPU...")
    tstart = time()
    lambdas_cpu, outspec_cpu = GRASS.synthesize_spectra_eclipse(spec, disk, obs_long, obs_lat, alt, lines ./ 10.0, time_stamps, "NIR", verbose=true, use_gpu=false)
    tstop = time()
    @printf(">>> Synthesis time --> %.3f seconds \n", tstop - tstart)

    #measure velocities
    v_grid_cpu, ccf_cpu = GRASS.calc_ccf(lambdas_cpu, outspec_cpu, spec)
    rvs_cpu, sigs_cpu = GRASS.calc_rvs_from_ccf(v_grid_cpu, ccf_cpu)
    println(rvs_cpu)
end

if case == "EXPRES"
    expres_timestamps = ["2023-10-14T14:10:59", "2023-10-14T14:14:06", "2023-10-14T14:17:04", "2023-10-14T14:19:54", "2023-10-14T14:23:59", "2023-10-14T14:26:38", "2023-10-14T14:29:11", "2023-10-14T14:31:41", "2023-10-14T14:34:09", "2023-10-14T14:36:33", "2023-10-14T14:38:56", "2023-10-14T14:41:16", "2023-10-14T14:43:33", "2023-10-14T14:45:49", "2023-10-14T14:49:17", "2023-10-14T14:51:29", "2023-10-14T14:53:39", "2023-10-14T14:55:48", "2023-10-14T14:57:56", "2023-10-14T15:00:03", "2023-10-14T15:02:09", "2023-10-14T15:04:15", "2023-10-14T15:06:19", "2023-10-14T15:08:22", "2023-10-14T15:11:40", "2023-10-14T15:13:41", "2023-10-14T15:15:43", "2023-10-14T15:17:45", "2023-10-14T15:19:45", "2023-10-14T15:21:48", "2023-10-14T15:23:51", "2023-10-14T15:25:56", "2023-10-14T15:28:00", "2023-10-14T15:30:06", "2023-10-14T15:32:14", "2023-10-14T15:34:25", "2023-10-14T15:36:37", "2023-10-14T15:38:53", "2023-10-14T15:41:09", "2023-10-14T15:43:29", "2023-10-14T15:45:53", "2023-10-14T15:48:23", "2023-10-14T15:51:00", "2023-10-14T15:53:43", "2023-10-14T15:57:47", "2023-10-14T16:00:54", "2023-10-14T16:04:16", "2023-10-14T16:07:56", "2023-10-14T16:11:48", "2023-10-14T16:15:39", "2023-10-14T16:19:29", "2023-10-14T16:23:20", "2023-10-14T16:27:13", "2023-10-14T16:31:06", "2023-10-14T16:35:00", "2023-10-14T16:38:52", "2023-10-14T16:42:43", "2023-10-14T16:46:34", "2023-10-14T16:50:25", "2023-10-14T16:54:17", "2023-10-14T16:57:59", "2023-10-14T17:01:24", "2023-10-14T17:04:31", "2023-10-14T17:07:27", "2023-10-14T17:10:11", "2023-10-14T17:12:47", "2023-10-14T17:15:16", "2023-10-14T17:17:38", "2023-10-14T17:19:55", "2023-10-14T17:22:07", "2023-10-14T17:24:15", "2023-10-14T17:26:20", "2023-10-14T17:28:19", "2023-10-14T17:30:16", "2023-10-14T17:34:02", "2023-10-14T17:37:09", "2023-10-14T17:40:07", "2023-10-14T17:43:00", "2023-10-14T17:45:50", "2023-10-14T17:48:35", "2023-10-14T17:51:20", "2023-10-14T17:53:58", "2023-10-14T17:56:37", "2023-10-14T17:59:18", "2023-10-14T18:01:52", "2023-10-14T18:05:29", "2023-10-14T18:08:02", "2023-10-14T18:10:35", "2023-10-14T18:13:16", "2023-10-14T18:15:46", "2023-10-14T18:18:17", "2023-10-14T18:20:47", "2023-10-14T18:23:22", "2023-10-14T18:25:54", "2023-10-14T18:28:25", "2023-10-14T18:30:52", "2023-10-14T18:33:32", "2023-10-14T18:37:00", "2023-10-14T18:39:30", "2023-10-14T18:41:55", "2023-10-14T18:44:21", "2023-10-14T18:46:46", "2023-10-14T18:49:15", "2023-10-14T18:51:40", "2023-10-14T18:54:04", "2023-10-14T18:56:29", "2023-10-14T18:58:54", "2023-10-14T19:01:19", "2023-10-14T19:03:43", "2023-10-14T19:06:07", "2023-10-14T19:09:34", "2023-10-14T19:11:58", "2023-10-14T19:14:20", "2023-10-14T19:16:42", "2023-10-14T19:19:05", "2023-10-14T19:21:36", "2023-10-14T19:23:58", "2023-10-14T19:26:24", "2023-10-14T19:28:46", "2023-10-14T19:31:10", "2023-10-14T19:33:32", "2023-10-14T19:35:57", "2023-10-14T19:38:23", "2023-10-14T19:41:47", "2023-10-14T19:44:09", "2023-10-14T19:46:29", "2023-10-14T19:48:51", "2023-10-14T19:51:13", "2023-10-14T19:53:36", "2023-10-14T19:56:04", "2023-10-14T19:58:25", "2023-10-14T20:00:45", "2023-10-14T20:03:06", "2023-10-14T20:05:34", "2023-10-14T20:07:54", "2023-10-14T20:10:15", "2023-10-14T20:13:40", "2023-10-14T20:16:00", "2023-10-14T20:18:23", "2023-10-14T20:20:44", "2023-10-14T20:23:05", "2023-10-14T20:25:26", "2023-10-14T20:27:56", "2023-10-14T20:30:26", "2023-10-14T20:32:50", "2023-10-14T20:35:11", "2023-10-14T20:37:33", "2023-10-14T20:39:59", "2023-10-14T20:42:25", "2023-10-14T20:45:52", "2023-10-14T20:48:12", "2023-10-14T20:50:34", "2023-10-14T20:52:57", "2023-10-14T20:55:23", "2023-10-14T20:57:50", "2023-10-14T21:00:11", "2023-10-14T21:02:35", "2023-10-14T21:04:58", "2023-10-14T21:07:19", "2023-10-14T21:09:42", "2023-10-14T21:12:04", "2023-10-14T21:14:26", "2023-10-14T21:17:55", "2023-10-14T21:20:20", "2023-10-14T21:22:44", "2023-10-14T21:25:08", "2023-10-14T21:27:31", "2023-10-14T21:30:00", "2023-10-14T21:32:23", "2023-10-14T21:34:51", "2023-10-14T21:37:15", "2023-10-14T21:39:40", "2023-10-14T21:42:06", "2023-10-14T21:44:31", "2023-10-14T21:46:57", "2023-10-14T21:50:24", "2023-10-14T21:52:51", "2023-10-14T21:55:17", "2023-10-14T21:57:44", "2023-10-14T22:00:13", "2023-10-14T22:02:42", "2023-10-14T22:05:12", "2023-10-14T22:07:41", "2023-10-14T22:10:10", "2023-10-14T22:12:40", "2023-10-14T22:15:11", "2023-10-14T22:17:43", "2023-10-14T22:20:15", "2023-10-14T22:23:59", "2023-10-14T22:26:36", "2023-10-14T22:29:19", "2023-10-14T22:31:56", "2023-10-14T22:34:31", "2023-10-14T22:37:06", "2023-10-14T22:39:42", "2023-10-14T22:42:18", "2023-10-14T22:44:54", "2023-10-14T22:47:33", "2023-10-14T22:50:16", "2023-10-14T22:52:56", "2023-10-14T22:56:41", "2023-10-14T22:59:11"]
    #convert from utc to et as needed by SPICE
    time_stamps = utc2et.(expres_timestamps)

    #EXPRES location
    obs_lat = 34.744444
    obs_long = -111.421944 
    alt = 2.359152

    # set up paramaters for disk
    N = 50
    Nt = length(time_stamps)

    # set up parameters for spectrum
    lines = [5434.0] # array of line centers 
    depths = [0.6]   # array of line depths
    templates = ["FeI_5434"] # template data to use
    if granulation == true
        variability = trues(length(lines))  # whether or not the bisectors should "dance"
    end
    if granulation == false
        variability = falses(length(lines))
    end
    blueshifts = zeros(length(lines))   # set convective blueshift value
    resolution = 7e5                    # spectral resolution

    # make the disk and spec composite type instances
    disk = GRASS.DiskParamsEclipse(N=N, Nt=Nt, Nsubgrid=10)
    spec = GRASS.SpecParams(lines=lines, depths=depths, variability=variability,
                    blueshifts=blueshifts, templates=templates, resolution=resolution)  

    # actually synthesize the spectra
    println(">>> Synthesizing on CPU...")
    tstart = time()
    lambdas_cpu, outspec_cpu = GRASS.synthesize_spectra_eclipse(spec, disk, obs_long, obs_lat, alt, lines ./ 10.0, time_stamps, "Optical", verbose=true, use_gpu=false)
    tstop = time()
    @printf(">>> Synthesis time --> %.3f seconds \n", tstop - tstart)

    #measure velocities
    v_grid_cpu, ccf_cpu = GRASS.calc_ccf(lambdas_cpu, outspec_cpu, spec)
    rvs_cpu, sigs_cpu = GRASS.calc_rvs_from_ccf(v_grid_cpu, ccf_cpu)
    print(rvs_cpu)
end

if case == "Gottingen"
    reiners_timestamps = ["2015-03-20T7:07:57.2", "2015-03-20T7:09:45.8", "2015-03-20T7:11:34.3", "2015-03-20T7:13:22.9", "2015-03-20T7:15:11.5", "2015-03-20T7:17:00.3", "2015-03-20T7:18:49.7", "2015-03-20T7:20:38.5", "2015-03-20T7:22:27.4", "2015-03-20T7:24:16.5", "2015-03-20T7:26:05.5", "2015-03-20T7:27:53.8", "2015-03-20T7:29:42.5", "2015-03-20T7:31:30.7", "2015-03-20T7:33:19.2", "2015-03-20T7:35:09.5", "2015-03-20T7:36:58.0", "2015-03-20T7:38:46.1", "2015-03-20T7:40:34.6", "2015-03-20T7:42:22.8", "2015-03-20T7:44:11.5", "2015-03-20T7:46:00.1", "2015-03-20T7:47:48.8", "2015-03-20T7:49:37.1", "2015-03-20T7:51:25.3", "2015-03-20T7:53:13.9", "2015-03-20T7:55:02.3", "2015-03-20T7:56:50.7", "2015-03-20T7:58:39.0", "2015-03-20T8:00:27.2", "2015-03-20T8:02:15.7", "2015-03-20T8:04:04.0", "2015-03-20T8:05:53.0", "2015-03-20T8:07:41.4", "2015-03-20T8:09:30.0", "2015-03-20T8:11:18.5", "2015-03-20T8:13:07.1", "2015-03-20T8:14:55.3", "2015-03-20T8:16:43.7", "2015-03-20T8:18:32.1", "2015-03-20T8:20:20.4", "2015-03-20T8:22:09.4", "2015-03-20T8:23:57.7", "2015-03-20T8:25:46.1", "2015-03-20T8:27:34.7", "2015-03-20T8:29:23.0", "2015-03-20T8:31:11.3", "2015-03-20T8:32:59.5", "2015-03-20T8:34:47.9", "2015-03-20T8:36:36.3", "2015-03-20T8:38:54.5", "2015-03-20T8:40:43.0", "2015-03-20T8:42:31.4", "2015-03-20T8:44:19.9", "2015-03-20T8:46:08.5", "2015-03-20T8:47:56.8", "2015-03-20T8:49:45.5", "2015-03-20T8:51:34.0", "2015-03-20T8:53:22.9", "2015-03-20T8:55:11.5", "2015-03-20T8:56:59.6", "2015-03-20T8:58:47.9", "2015-03-20T9:00:36.1", "2015-03-20T9:02:24.8", "2015-03-20T9:04:13.1", "2015-03-20T9:06:01.7", "2015-03-20T9:07:50.2", "2015-03-20T9:09:38.7", "2015-03-20T9:11:27.1", "2015-03-20T9:13:15.5", "2015-03-20T9:15:04.0", "2015-03-20T9:16:53.1", "2015-03-20T9:18:42.1", "2015-03-20T9:20:30.9", "2015-03-20T9:22:19.7", "2015-03-20T9:24:08.5", "2015-03-20T9:25:57.3", "2015-03-20T9:27:45.9", "2015-03-20T9:29:34.7", "2015-03-20T9:31:23.1", "2015-03-20T9:33:11.5", "2015-03-20T9:34:59.9", "2015-03-20T9:36:48.4", "2015-03-20T9:38:37.4", "2015-03-20T9:40:26.3", "2015-03-20T9:42:15.0", "2015-03-20T9:44:03.8", "2015-03-20T9:45:52.2", "2015-03-20T9:47:40.7", "2015-03-20T9:49:29.7", "2015-03-20T9:51:18.4", "2015-03-20T9:53:07.5", "2015-03-20T9:54:55.9", "2015-03-20T9:56:44.9", "2015-03-20T9:58:33.3", "2015-03-20T10:00:21.8", "2015-03-20T10:02:10.1", "2015-03-20T10:03:58.6", "2015-03-20T10:05:47.4", "2015-03-20T10:07:36.2", "2015-03-20T10:09:54.5", "2015-03-20T10:11:43.9", "2015-03-20T10:13:33.6", "2015-03-20T10:15:22.6", "2015-03-20T10:17:11.7", "2015-03-20T10:19:00.9", "2015-03-20T10:20:49.9", "2015-03-20T10:22:38.9", "2015-03-20T10:24:27.9", "2015-03-20T10:26:17.0", "2015-03-20T10:28:07.1", "2015-03-20T10:29:56.1", "2015-03-20T10:31:45.1", "2015-03-20T10:33:34.0", "2015-03-20T10:35:22.9", "2015-03-20T10:37:12.0", "2015-03-20T10:39:01.0", "2015-03-20T10:40:49.9", "2015-03-20T10:42:38.7", "2015-03-20T10:44:27.6", "2015-03-20T10:46:16.8", "2015-03-20T10:48:05.8", "2015-03-20T10:49:54.9", "2015-03-20T10:51:43.6", "2015-03-20T10:53:32.7", "2015-03-20T10:55:21.9", "2015-03-20T10:57:10.8", "2015-03-20T10:58:59.7", "2015-03-20T11:00:49.8", "2015-03-20T11:02:38.6", "2015-03-20T11:04:27.7", "2015-03-20T11:06:16.8", "2015-03-20T11:08:05.7", "2015-03-20T11:09:54.6", "2015-03-20T11:11:43.6", "2015-03-20T11:13:33.1", "2015-03-20T11:15:22.0", "2015-03-20T11:17:10.9", "2015-03-20T11:18:59.9", "2015-03-20T11:20:48.7", "2015-03-20T11:22:37.7", "2015-03-20T11:24:26.7", "2015-03-20T11:26:15.7", "2015-03-20T11:28:04.3", "2015-03-20T11:29:53.0", "2015-03-20T11:31:41.7", "2015-03-20T11:33:30.3", "2015-03-20T11:35:19.0", "2015-03-20T11:37:07.7", "2015-03-20T11:38:56.9", "2015-03-20T11:48:37.5", "2015-03-20T11:50:26.6", "2015-03-20T11:52:15.6", "2015-03-20T11:54:04.2", "2015-03-20T11:55:53.1", "2015-03-20T11:57:41.8", "2015-03-20T11:59:30.5", "2015-03-20T12:01:19.1", "2015-03-20T12:03:07.6"]
    #convert from utc to et as needed by SPICE
    time_stamps = utc2et.(reiners_timestamps)

    variable_names = ["zenith", "dA_total_proj", "idx1", "idx3", "mu_grid", "z_rot_sub", "mu", "ax_codes", "dA", "N"]

    # Open the JLD2 file and read the variables into a dictionary
    data = jldopen("data/solar_disk/reiners_N_50.jld2", "r") do file
        Dict(var => read(file, var) for var in variable_names)
    end

    zenith_mean = deepcopy(data["zenith"])
    dA_total_proj = deepcopy(data["dA_total_proj"])
    idx1 = deepcopy(data["idx1"])
    idx3 = deepcopy(data["idx3"])
    mu_grid = deepcopy(data["mu_grid"])
    z_rot_sub = deepcopy(data["z_rot_sub"])
    stored_μs = deepcopy(data["mu"])
    stored_ax_codes = deepcopy(data["ax_codes"])
    stored_dA = deepcopy(data["dA"])

    # set up paramaters for disk
    N = data["N"]
    Nt = length(time_stamps)
    disk = GRASS.DiskParamsEclipse(N=N, Nt=Nt, Nsubgrid=10)

    # set up parameters for spectrum
    lines = [5800.0] # array of line centers 
    depths = [0.6]   # array of line depths
    templates = ["FeI_5434"] # template data to use
    if granulation == true
        variability = trues(length(lines))  # whether or not the bisectors should "dance"
    end
    if granulation == false
        variability = falses(length(lines))
    end
    blueshifts = zeros(length(lines))   # set convective blueshift value
    resolution = 7e5                    # spectral resolution

    # make the disk and spec composite type instances
    spec = GRASS.SpecParams(lines=lines, depths=depths, variability=variability,
                    blueshifts=blueshifts, templates=templates, resolution=resolution)  
    
    # actually synthesize the spectra
    println(">>> Synthesizing on CPU...")
    tstart = time()
    lambdas_cpu, outspec_cpu = GRASS.synthesize_spectra_eclipse(spec, disk, lines, "NL94", zenith_mean,
                                    dA_total_proj, idx1, idx3, mu_grid, z_rot_sub,
                                    stored_μs, stored_ax_codes, stored_dA, [1.0], ext_toggle = true, verbose=true, use_gpu=false)
    
    tstop = time()
    @printf(">>> Synthesis time --> %.3f seconds \n", tstop - tstart)

    #measure velocities
    v_grid_cpu, ccf_cpu = GRASS.calc_ccf(lambdas_cpu, outspec_cpu, spec)
    rvs_cpu, sigs_cpu = GRASS.calc_rvs_from_ccf(v_grid_cpu, ccf_cpu)
    print(rvs_cpu)
end

########################################################################
#TO BE CLEAR
#grass = src: gpu (finalize and clear) + structures (GPU ones need to be finalized)
#grass once gpu done run with gpu + clear loose in src and loose outside src - that follow GPU pipeline

# if case == "GPU_test" 
#     epoch = utc2et.("2023-10-14T15:26:45")

#     #NEID location
#     obs_lat = 31.9583 
#     obs_long = -111.5967  
#     alt = 2.097938 

#     # set up paramaters for disk
#     N = 2
#     Nsubgrid=2
#     Nt = length(epoch)
    
#     # set up parameters for spectrum
#     lines = [6173.0, 6173.0] # array of line centers 
#     depths = [0.6, 0.6]   # array of line depths
#     templates = ["FeI_6173", "FeI_6173"] # template data to use
        # if granulation == true
        #     variability = trues(length(lines))  # whether or not the bisectors should "dance"
        # end
        # if granulation == false
        #     variability = falses(length(lines))
        # end
#     blueshifts = zeros(length(lines))   # set convective blueshift value
#     resolution = 7e5                    # spectral resolution

#     # make the disk and spec composite type instances
#     disk = GRASS.DiskParamsEclipse(N=N, Nt=Nt, Nsubgrid=Nsubgrid)
#     spec = GRASS.SpecParams(lines=lines, depths=depths, variability=variability,
#                     blueshifts=blueshifts, templates=templates, resolution=resolution) 
    
#     gpu_allocs = GRASS.GPUAllocsEclipse(spec, disk, Int(length(lines)))
#     GRASS.calc_eclipse_quantities_gpu!(epoch, obs_long, obs_lat, alt, lines./10.0, disk, gpu_allocs)

#     println(Array(gpu_allocs.ld)) #plt.imshow(diff between two arrays)
#     #maximum(abs.(wsp.ld[:,:,1] .- Array(gpu_allocs.ld)[:,:,1]))
#     #plt.imshow(wsp.ld[:,:,1] .- Array(gpu_allocs.ld)[:,:,1])
#     println("----------------------")
#     wsp = GRASS.SynthWorkspaceEclipse(disk, Int(length(lines)))
#     mem = GRASS.GeoWorkspaceEclipse(disk, Int(length(lines)))
#     GRASS.eclipse_compute_quantities!(disk, epoch, obs_long, obs_lat, alt, lines./10.0, wsp.ϕc, wsp.θc, 
#                                                 wsp.μs, wsp.ld, wsp.ext, wsp.dA, wsp.xyz, wsp.wts, wsp.z_rot, wsp.ax_codes,
#                                                 mem.dA_total_proj_mean, mem.mean_intensity, mem.mean_weight_v_no_cb,
#                                                 mem.mean_weight_v_earth_orb, mem.pole_vector_grid,
#                                                 mem.SP_sun_pos, mem.SP_sun_vel, mem.SP_bary, mem.SP_bary_pos,
#                                                 mem.SP_bary_vel, mem.OP_bary, mem.mu_grid, mem.projected_velocities_no_cb, 
#                                                 mem.distance, mem.v_scalar_grid, mem.v_earth_orb_proj)

#     println(wsp.ld)       
# end