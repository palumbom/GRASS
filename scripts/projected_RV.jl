using JLD2
using SPICE
using GRASS
using Revise
using CSV
using DataFrames
using Statistics

GRASS.get_kernels()

function projected_RV(time, filename, LD_type, ext_toggle)
    #convert from utc to et as needed by SPICE
    time_stamps = utc2et.(time)

    variable_names = ["dA_total_proj_mean", "mean_weight_v_no_cb", "mean_weight_v_earth_orb", "zenith", "dA_total_proj", "idx1", "idx3", "mu_grid", "z_rot_sub", "N"]

    # Open the JLD2 file and read the variables into a dictionary
    data = jldopen("data/solar_disk/$(filename).jld2", "r") do file
        Dict(var => read(file, var) for var in variable_names)
    end
    
    dA_total_proj_mean = deepcopy(data["dA_total_proj_mean"])
    mean_weight_v_no_cb = deepcopy(data["mean_weight_v_no_cb"])
    mean_weight_v_earth_orb = deepcopy(data["mean_weight_v_earth_orb"])
    zenith_mean = deepcopy(data["zenith"])
    dA_total_proj = deepcopy(data["dA_total_proj"])
    idx1 = deepcopy(data["idx1"])
    idx3 = deepcopy(data["idx3"])
    mu_grid = deepcopy(data["mu_grid"])
    z_rot_sub = deepcopy(data["z_rot_sub"])

    # set up paramaters for disk
    N = data["N"]
    Nt = length(time_stamps)
    disk = GRASS.DiskParamsEclipse(N=N, Nt=Nt, Nsubgrid=10)

    wsp = GRASS.SynthWorkspaceEclipse(disk, 1, Nt, verbose=true)
    # get lines to construct templates
    lp = GRASS.LineProperties()
    name = GRASS.get_name(lp)
    λrest = GRASS.get_rest_wavelength(lp)
    lfile = GRASS.get_file(lp)

    extinction_coeff = DataFrame(CSV.File("data/NEID_two_extinctions.csv"))

    RV_list_no_cb_final = Vector{Vector{Float64}}(undef,size(lp.λrest)...)
    intensity_list_final = Vector{Vector{Float64}}(undef,size(lp.λrest)...)
    mean_intensity_final = Vector{Vector{Matrix{Float64}}}(undef,size(lp.λrest)...)

    # loop over lines
    for i in eachindex(lp.λrest) 
        println("\t>>> Template: " * string(splitdir(lfile[i])[2]))
        # set up parameters for synthesis
        lines = [λrest[i]]

        RV_list_no_cb = Vector{Float64}(undef,size(time_stamps)...)
        intensity_list = Vector{Float64}(undef,size(time_stamps)...)
        mean_intensity_list = Vector{Matrix{Float64}}(undef,size(time_stamps)...)
        for t in 1:disk.Nt
            if t < 85
                neid_ext_coeff = extinction_coeff[extinction_coeff[!, "Wavelength"] .== λrest[i], "Ext1"]
            elseif t >= 85
                neid_ext_coeff = extinction_coeff[extinction_coeff[!, "Wavelength"] .== λrest[i], "Ext2"]
            end

            mean_intensity = GRASS.eclipse_compute_intensity(disk, lines, neid_ext_coeff, LD_type, idx1[t], idx3[t],
                                                                        mu_grid[t], mean_weight_v_no_cb[:, :, t], mean_weight_v_earth_orb[:, :, t],
                                                                        z_rot_sub[t], dA_total_proj[t], wsp.ld, wsp.z_rot, zenith_mean[t], ext_toggle, wsp.ext)
            idx_grid = mean_intensity[:, :, 1] .> 0.0

            if ext_toggle == false
                brightness = mean_intensity[:, :, 1] .* dA_total_proj_mean[:, :, t]
            end

            if ext_toggle == true
                brightness = mean_intensity[:, :, 1] .* dA_total_proj_mean[:, :, t] .* wsp.ext[:, :, 1]
            end

            cheapflux = sum(view(brightness, idx_grid))

            #determine final mean weighted velocity for disk grid
            final_weight_v_no_cb = sum(view(mean_weight_v_no_cb[:, :, t] .* brightness, idx_grid)) / cheapflux 
            final_weight_v_no_cb += mean(view(mean_weight_v_earth_orb[:, :, t], idx_grid))  

            RV_list_no_cb[t] = deepcopy(final_weight_v_no_cb)
            intensity_list[t] = deepcopy(cheapflux)
            mean_intensity_list[t] = deepcopy(mean_intensity[:, :, 1])
        end
        RV_list_no_cb_final[i] = deepcopy(RV_list_no_cb)
        intensity_list_final[i] = deepcopy(intensity_list)
        mean_intensity_final[i] = deepcopy(mean_intensity_list)
    end

    @save "$(filename)_KSSD_2_ext.jld2"
    jldopen("$(filename)_KSSD_2_ext.jld2", "a+") do file
        file["RV_list_no_cb"] = deepcopy(RV_list_no_cb_final) 
        file["intensity_list"] = deepcopy(intensity_list_final)
        file["mean_intensity"] = deepcopy(mean_intensity_final)
    end
end

#exposure meter data
exp_meter_data = DataFrame(CSV.File("data/exposure_meter_data.csv"))
exp_meter_time = exp_meter_data[!, "Array2"]
#obs times
neid_october = ["2023-10-14T15:26:45.500000", "2023-10-14T15:28:07.500000", "2023-10-14T15:29:30.500000", "2023-10-14T15:30:53.500000", "2023-10-14T15:32:15.500000", "2023-10-14T15:33:38.500000", "2023-10-14T15:35:01.500000", "2023-10-14T15:36:23.500000", "2023-10-14T15:37:46.500000", "2023-10-14T15:39:09.500000", "2023-10-14T15:40:31.500000", "2023-10-14T15:41:54.500000", "2023-10-14T15:43:17.500000", "2023-10-14T15:44:39.500000", "2023-10-14T15:46:02.500000", "2023-10-14T15:47:25.500000", "2023-10-14T15:48:47.500000", "2023-10-14T15:50:10.500000", "2023-10-14T15:51:33.500000", "2023-10-14T15:52:56.500000", "2023-10-14T15:54:18.500000", "2023-10-14T15:55:41.500000", "2023-10-14T15:57:04.500000", "2023-10-14T15:58:26.500000", "2023-10-14T15:59:49.500000", "2023-10-14T16:01:12.500000", "2023-10-14T16:02:34.500000", "2023-10-14T16:03:57.500000", "2023-10-14T16:05:20.500000", "2023-10-14T16:06:42.500000", "2023-10-14T16:08:05.500000", "2023-10-14T16:09:28.500000", "2023-10-14T16:10:50.500000", "2023-10-14T16:12:13.500000", "2023-10-14T16:13:36.500000", "2023-10-14T16:14:58.500000", "2023-10-14T16:16:21.500000", "2023-10-14T16:17:44.500000", "2023-10-14T16:19:06.500000", "2023-10-14T16:20:29.500000", "2023-10-14T16:21:52.500000", "2023-10-14T16:23:15.500000", "2023-10-14T16:24:37.500000", "2023-10-14T16:26:00.500000", "2023-10-14T16:27:23.500000", "2023-10-14T16:28:45.500000", "2023-10-14T16:30:08.500000", "2023-10-14T16:31:31.500000", "2023-10-14T16:32:53.500000", "2023-10-14T16:34:16.500000", "2023-10-14T16:35:39.500000", "2023-10-14T16:37:01.500000", "2023-10-14T16:38:24.500000", "2023-10-14T16:39:47.500000", "2023-10-14T16:41:09.500000", "2023-10-14T16:42:32.500000", "2023-10-14T16:43:55.500000", "2023-10-14T16:45:17.500000", "2023-10-14T16:46:40.500000", "2023-10-14T16:48:03.500000", "2023-10-14T16:49:25.500000", "2023-10-14T16:50:48.500000", "2023-10-14T16:52:11.500000", "2023-10-14T16:53:33.500000", "2023-10-14T16:54:56.500000", "2023-10-14T16:56:19.500000", "2023-10-14T16:57:42.500000", "2023-10-14T16:59:04.500000", "2023-10-14T17:00:27.500000", "2023-10-14T17:01:50.500000", "2023-10-14T17:03:12.500000", "2023-10-14T17:04:35.500000", "2023-10-14T17:05:58.500000", "2023-10-14T17:07:20.500000", "2023-10-14T17:08:43.500000", "2023-10-14T17:10:06.500000", "2023-10-14T17:11:28.500000", "2023-10-14T17:12:51.500000", "2023-10-14T17:14:14.500000", "2023-10-14T17:15:36.500000", "2023-10-14T17:16:59.500000", "2023-10-14T17:18:22.500000", "2023-10-14T17:19:44.500000", "2023-10-14T17:21:07.500000", "2023-10-14T17:22:30.500000", "2023-10-14T17:23:52.500000", "2023-10-14T17:25:15.500000", "2023-10-14T17:26:38.500000", "2023-10-14T17:28:01.500000", "2023-10-14T17:29:23.500000", "2023-10-14T17:30:46.500000", "2023-10-14T17:32:09.500000", "2023-10-14T17:33:31.500000", "2023-10-14T17:34:54.500000", "2023-10-14T17:36:17.500000", "2023-10-14T17:37:39.500000", "2023-10-14T17:39:02.500000", "2023-10-14T17:40:25.500000", "2023-10-14T17:41:47.500000", "2023-10-14T17:43:10.500000", "2023-10-14T17:44:33.500000", "2023-10-14T17:45:55.500000", "2023-10-14T17:47:18.500000", "2023-10-14T17:48:41.500000", "2023-10-14T17:50:03.500000", "2023-10-14T17:51:26.500000", "2023-10-14T17:52:49.500000", "2023-10-14T17:54:11.500000", "2023-10-14T17:55:34.500000", "2023-10-14T17:56:57.500000", "2023-10-14T17:58:20.500000", "2023-10-14T17:59:42.500000", "2023-10-14T18:01:05.500000", "2023-10-14T18:02:28.500000", "2023-10-14T18:03:50.500000", "2023-10-14T18:05:13.500000", "2023-10-14T18:06:36.500000", "2023-10-14T18:07:58.500000", "2023-10-14T18:09:21.500000", "2023-10-14T18:10:44.500000", "2023-10-14T18:12:06.500000", "2023-10-14T18:13:29.500000", "2023-10-14T18:14:52.500000", "2023-10-14T18:16:14.500000", "2023-10-14T18:17:37.500000", "2023-10-14T18:19:00.500000", "2023-10-14T18:20:22.500000", "2023-10-14T18:21:45.500000", "2023-10-14T18:23:08.500000", "2023-10-14T18:24:30.500000", "2023-10-14T18:25:53.500000", "2023-10-14T18:27:16.500000", "2023-10-14T18:28:38.500000", "2023-10-14T18:30:01.500000", "2023-10-14T18:31:24.500000", "2023-10-14T18:32:47.500000", "2023-10-14T18:34:09.500000", "2023-10-14T18:35:32.500000", "2023-10-14T18:36:55.500000", "2023-10-14T18:38:17.500000", "2023-10-14T18:39:40.500000", "2023-10-14T18:41:03.500000", "2023-10-14T18:42:25.500000", "2023-10-14T18:43:48.500000", "2023-10-14T18:45:11.500000", "2023-10-14T18:46:33.500000", "2023-10-14T18:47:56.500000", "2023-10-14T18:49:19.500000", "2023-10-14T18:50:41.500000", "2023-10-14T18:52:04.500000", "2023-10-14T18:53:27.500000", "2023-10-14T18:54:49.500000", "2023-10-14T18:56:12.500000", "2023-10-14T18:57:35.500000", "2023-10-14T18:58:57.500000", "2023-10-14T19:00:20.500000", "2023-10-14T19:01:43.500000", "2023-10-14T19:03:06.500000"]
neid_april = ["2024-04-08T20:11:26", "2024-04-08T20:10:03", "2024-04-08T20:08:41", "2024-04-08T20:07:18", "2024-04-08T20:05:55", "2024-04-08T20:04:33", "2024-04-08T20:03:10", "2024-04-08T20:01:47", "2024-04-08T20:00:25", "2024-04-08T19:59:02", "2024-04-08T19:57:39", "2024-04-08T19:56:16", "2024-04-08T19:54:54", "2024-04-08T19:53:31", "2024-04-08T19:52:08", "2024-04-08T19:50:46", "2024-04-08T19:49:23", "2024-04-08T19:48:00", "2024-04-08T19:46:38", "2024-04-08T19:45:15", "2024-04-08T19:43:52", "2024-04-08T19:42:30", "2024-04-08T19:41:07", "2024-04-08T19:39:44", "2024-04-08T19:38:22", "2024-04-08T19:36:59", "2024-04-08T19:35:36", "2024-04-08T19:34:14", "2024-04-08T19:32:51", "2024-04-08T19:31:28", "2024-04-08T19:30:06", "2024-04-08T19:28:43", "2024-04-08T19:27:20", "2024-04-08T19:25:57", "2024-04-08T19:24:35", "2024-04-08T19:23:12", "2024-04-08T19:21:49", "2024-04-08T19:20:27", "2024-04-08T19:19:04", "2024-04-08T19:17:41", "2024-04-08T19:16:19", "2024-04-08T19:14:56", "2024-04-08T19:13:33", "2024-04-08T19:12:11", "2024-04-08T19:10:48", "2024-04-08T19:09:25", "2024-04-08T19:08:03", "2024-04-08T19:06:40", "2024-04-08T19:05:17", "2024-04-08T19:03:55", "2024-04-08T19:02:32", "2024-04-08T19:01:09", "2024-04-08T18:59:47", "2024-04-08T18:58:24", "2024-04-08T18:57:01", "2024-04-08T18:55:38", "2024-04-08T18:54:16", "2024-04-08T18:52:53", "2024-04-08T18:51:30", "2024-04-08T18:50:08", "2024-04-08T18:48:45", "2024-04-08T18:47:22", "2024-04-08T18:46:00", "2024-04-08T18:44:37", "2024-04-08T18:43:14", "2024-04-08T18:41:52", "2024-04-08T18:40:29", "2024-04-08T18:39:06", "2024-04-08T18:37:44", "2024-04-08T18:36:21", "2024-04-08T18:34:58", "2024-04-08T18:33:36", "2024-04-08T18:32:13", "2024-04-08T18:30:50", "2024-04-08T18:29:28", "2024-04-08T18:28:05", "2024-04-08T18:26:42", "2024-04-08T18:25:19", "2024-04-08T18:23:57", "2024-04-08T18:22:34", "2024-04-08T18:21:11", "2024-04-08T18:19:49", "2024-04-08T18:18:26", "2024-04-08T18:17:03", "2024-04-08T18:15:41", "2024-04-08T18:14:18", "2024-04-08T18:12:55", "2024-04-08T18:11:33", "2024-04-08T18:10:10", "2024-04-08T18:08:47", "2024-04-08T18:07:25", "2024-04-08T18:06:02", "2024-04-08T18:04:39", "2024-04-08T18:03:17", "2024-04-08T18:01:54", "2024-04-08T18:00:31", "2024-04-08T17:59:09", "2024-04-08T17:57:46", "2024-04-08T17:56:23", "2024-04-08T17:55:01", "2024-04-08T17:53:38", "2024-04-08T17:52:15", "2024-04-08T17:50:52", "2024-04-08T17:49:30", "2024-04-08T17:48:07", "2024-04-08T17:46:44", "2024-04-08T17:45:22", "2024-04-08T17:43:59", "2024-04-08T17:42:36", "2024-04-08T17:41:14", "2024-04-08T17:39:51", "2024-04-08T17:38:28", "2024-04-08T17:37:06", "2024-04-08T17:35:43", "2024-04-08T17:34:20", "2024-04-08T17:32:58", "2024-04-08T17:31:35", "2024-04-08T17:30:12", "2024-04-08T17:28:50", "2024-04-08T17:27:27", "2024-04-08T17:26:04", "2024-04-08T17:24:42", "2024-04-08T17:23:19", "2024-04-08T17:21:56", "2024-04-08T17:20:33", "2024-04-08T17:19:11", "2024-04-08T17:17:48", "2024-04-08T17:16:25", "2024-04-08T17:15:03", "2024-04-08T17:13:40", "2024-04-08T17:12:17", "2024-04-08T17:10:55", "2024-04-08T17:09:32", "2024-04-08T17:08:09", "2024-04-08T17:06:47", "2024-04-08T17:05:24", "2024-04-08T17:04:01", "2024-04-08T17:02:39", "2024-04-08T17:01:16", "2024-04-08T16:59:53", "2024-04-08T16:58:31", "2024-04-08T16:57:08", "2024-04-08T16:55:45", "2024-04-08T16:54:23", "2024-04-08T16:53:00", "2024-04-08T16:51:37", "2024-04-08T16:50:14", "2024-04-08T16:48:52"]

projected_RV(neid_october, "neid_october_N_50", "KSSD", true)